[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[dependency-groups]
dev = [
    "black[jupyter]>=23.7.0,<=24.3.0",  # Formatter with support for Jupyter
    "codespell[toml]>=v2.2.6",  # Spelling checker
    "ipykernel>=6.29.5,<7",  # Jupyter kernel for running python code in notebooks
    "mypy==1.11.0",  # static type checker
    "pandas", # Always install latest version
    "pre-commit==3.2.0",  # Code quality checks
    "pylint==2.15.10",  # Linter
    "pytest-asyncio>=0.23.7",  # Async test support
    "pytest-mock>=3.14.0",  # Pytest plugin for easier mocking with the unittest.mock library.
    "pytest>=8.2.1",  # Testing framework
    "ruff==0.11.11",  # Linter and formatter
    "types-Deprecated>=0.1.0",  # Type stubs for the Deprecated library, for better type checking.
    "types-PyYAML>=6.0.12.12,<7",  # Type stubs for the PyYAML library.
    "types-protobuf>=4.24.0.4,<5",  # Type stubs for the protobuf library.
    "types-redis==4.5.5.0",  # Type stubs for the Redis library.
    "types-requests==2.28.11.8",  # Type stubs for the Requests library.
    "types-setuptools==67.1.0.0",  # Type stubs for the Setuptools library.
    "tomli>=2.2.1",  # Parsing toml files used to read and work with toml files in python
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true  # Configures flake8-annotations to require return types on __init__.

[tool.ruff.lint.pydocstyle]
convention = "google"  # Sets pydocstyle docstring convention to "google".

[project]
authors = [{email = "contact.bubl.ai@gmail.com", name = "Santiago Olivar"}]
classifiers = [
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
description = "Building Blocks for AI Applications"
license = "MIT"
maintainers = [
    {email = "contact.bubl.ai@gmail.com", name = "Santiago Olivar"},
]
name = "bubl_ai"
readme = "README.md"
requires-python = ">=3.10,<4.0"
version = "0.0.1"


[tool.codespell]
check-filenames = true
check-hidden = true # Check hidden files and directories (those starting with a dot).
ignore-words-list = ""  # Add any words you want to ignore here, separated by commas.
skip = ""  # Add any files or directories you want to skip here, separated by commas.


[tool.mypy]
disallow_untyped_defs = true  # Requires all functions to have type annotations
exclude = ["_static", "build", "examples", "notebooks"]
ignore_missing_imports = true  # Suppresses errors when MyPy can't find type information for imported libraries
explicit_package_bases = true  # this with mypy_paths tells mypy where the root of the package is
mypy_path = "bubl"
namespace_packages = true  # package without __init__.py files
plugins = "pydantic.mypy" # better type checking of Pydantic models.
python_version = "3.10"

[tool.ruff]
exclude = [
    "_static",
    "examples",
    "notebooks",
]
target-version = "py312"  # Python 3.12 standards

[tool.ruff.lint]
ignore = [
    "COM812",  # Missing trailing comma (conflicts with formatter)
    "D212",    # Multi-line docstring summary should start at the first line
    "D400",    # First line should end with a period
    "D415",    # First line should end with a period, question mark, or exclamation point
    "D417",    # Missing argument descriptions in the docstring
    "F541",    # f-string without any placeholders
    "RUF100",  # Unused noqa directive
    "TC002",   # Move third-party import into a type-checking block
    "UP",      # All pyupgrade rules (Python version upgrades)
    "PT001",   # Use @pytest.fixture() over @pytest.fixture
    "E501",    # Line too long (conflicts with formatter)
    "E402",    # Module level import not at top of file
    "PYI063",  # Use `typing.Self` instead of class-bound TypeVar
    "ANN204",  # Missing return type annotation for special method
    "D401",    # First line of docstring should be in imperative mood
    "D404",    # First word of the docstring should not be "This"
]

select = [
    "ANN204",  # Missing return type annotation for special method
    "B009",    # Do not call getattr with a constant attribute value
    "B010",    # Do not call setattr with a constant attribute value
    "B011",    # Do not call assert False since python -O removes these calls
    "B013",    # A length-one tuple literal is redundant
    "B014",    # Exception handler is an exception group
    "C4",      # flake8-comprehensions (list/dict/set comprehension improvements)
    "COM812",  # Missing trailing comma
    "COM819",  # Prohibited trailing comma
    "D201",    # No blank lines allowed before function docstring
    "D202",    # No blank lines allowed after function docstring
    "D204",    # 1 blank line required after class docstring
    "D207",    # Docstring is under-indented
    "D208",    # Docstring is over-indented
    "D209",    # Multi-line docstring closing quotes should be on a separate line
    "D211",    # No blank lines allowed before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D214",    # Section is over-indented
    "D215",    # Section underline is over-indented
    "D3",      # All pydocstyle missing docstring rules
    "D4",      # All pydocstyle docstring content rules
    "E",       # All pycodestyle error rules
    "EXE004",  # File has executable permissions but no shebang
    "F401",    # Module imported but unused
    "F504",    # % format string has unused named arguments
    "F541",    # f-string without any placeholders
    "F632",    # Use == to compare constant literals
    "FLY",     # flynt (convert string formatting to f-strings)
    "G010",    # Logging .warn() is deprecated in favor of .warning()
    "I002",    # Missing required import
    "PERF1",   # All perflint performance rules
    "PIE790",  # Unnecessary pass statement
    "PIE794",  # Class field definitions after methods
    "PIE808",  # Unnecessary start argument in range
    "PIE810",  # Call startswith/endswith once with tuple
    "PLC0414", # Useless import alias
    "PLE2510", # Invalid unescaped character backslash
    "PLE2512", # Invalid escape sequence
    "PLE2513", # Invalid escape sequence
    "PLE2514", # Invalid escape sequence
    "PLE2515", # Invalid escape sequence
    "PLR1711", # Useless return at end of function
    "PT001",   # Use @pytest.fixture() over @pytest.fixture
    "PT003",   # scope='function' is implied in @pytest.fixture()
    "PT006",   # Wrong name(s) type in @pytest.mark.parametrize
    "PT02",    # All pytest configuration rules
    "PTH201",  # Do not pass the current directory explicitly to Path
    "PYI",     # All flake8-pyi stub file rules
    "Q",       # flake8-quotes (quote style consistency)
    "RET501",  # Do not explicitly return None in function if it is the only possible return value
    "RET502",  # Do not implicitly return None in function able to return non-None value
    "RET503",  # Missing explicit return at the end of function able to return non-None value
    "RET504",  # Unnecessary assignment before return statement
    "RSE",     # flake8-raise (raise statement improvements)
    "RUF005",  # Consider iterable unpacking instead of concatenation
    "RUF010",  # Use explicit conversion flag
    "RUF015",  # Prefer next(iter(x)) over single element slice
    "RUF1",    # All Ruff-specific rules
    "SIM101",  # Use isinstance call instead of type comparison
    "SIM103",  # Return the condition directly
    "SIM109",  # Use tuple to compare with multiple values
    "SIM118",  # Use key in dict instead of key in dict.keys()
    "SIM2",    # All simplify boolean rules
    "SIM300",  # Yoda conditions are discouraged
    "SIM9",    # All simplify rules (9xx series)
    "TC005",   # Empty type-checking block
    "TD006",   # Invalid TODO tag
    "TID",     # flake8-tidy-imports (import organization)
    "TRY201",  # Use raise without specifying exception name in except
    "W",       # All pycodestyle warning rules
]

unfixable = [
    "ERA001",  # Prevents accidental deletion of commented code
]

[tool.tomlsort]
all = false
in_place = true
spaces_before_inline_comment = 2  # Match Python PEP 8
spaces_indent_inline_array = 4  # Match Python PEP 8
trailing_comma_inline_array = true

[tool.uv]
default-groups = [
    "dev",
]

[[tool.uv.index]]
name = "nvidia-pypi"  # Also check NVIDIA's PyPI when installing packages
url = "https://pypi.nvidia.com"
